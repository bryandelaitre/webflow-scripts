document.currentScript.id="mapboxInitScript";const MAPBOX_SCRIPT_PATH="https://api.tiles.mapbox.com/mapbox-gl-js/v3.1.0/mapbox-gl.js";const MAPBOX_SCRIPT_CSS="https://api.tiles.mapbox.com/mapbox-gl-js/v3.1.0/mapbox-gl.css";const mapContainer=document.querySelector('[data-mapbox-container="true"]');var mapMarker=null;if(document.querySelector('[data-mapbox="marker"]')){mapMarker=document.querySelector('[data-mapbox="marker"]').cloneNode(!0);document.querySelector('[data-mapbox="marker"]').remove();console.log(mapMarker)}
var style=document.createElement('link');style.setAttribute('href',MAPBOX_SCRIPT_CSS);style.setAttribute('rel','stylesheet');document.head.appendChild(style);loadMapboxScript(MAPBOX_SCRIPT_PATH).then(function(){console.log('Script has loaded');var mapboxInitData={id:mapContainer.id="map-container",token:mapboxgl.accessToken=mapContainer.getAttribute("data-mapbox-token")||!1,style:mapContainer.getAttribute("data-mapbox-style")||'mapbox://styles/mapbox/streets-v11',longPos:parseFloat(mapContainer.getAttribute("data-mapbox-longitude"))||0.0,latPos:parseFloat(mapContainer.getAttribute("data-mapbox-latitude"))||0.0,zoom:parseInt(mapContainer.getAttribute("data-mapbox-zoom"))||3,projection:mapContainer.getAttribute("data-mapbox-projection")||!1,scrollZoom:mapContainer.getAttribute("data-mapbox-scrollZoom")||!0,doubleClickZoom:mapContainer.getAttribute("data-mapbox-doubleClickZoom")||!0,adressPos:mapContainer.getAttribute("data-mapbox-center-adress")||!1,markerPos:mapContainer.getAttribute("data-mapbox-marker")||!1,markerEl:mapMarker}
if(mapboxInitData.token){const map=mapboxInit(mapboxInitData)}else{document.querySelector("#"+mapboxInitData.id).style.display='none';if(!mapboxInitData.token){console.error("Mapbox Token is missing")}}}).catch(function(error){console.error('Error loading script',error)});async function mapboxInit(mapboxInitData){if(mapboxInitData.adressPos){fetch(getGeocodingUrl(mapboxInitData.adressPos,mapboxgl.accessToken)).then(response=>response.json()).then(data=>{if(data.features.length>0){const coordinate=data.features[0].center;mapboxInitData.longPos=coordinate[0];mapboxInitData.latPos=coordinate[1]}else{console.log('No results found')}
return newMap(mapboxInitData)}).catch(error=>console.error(error))}else{return await newMap(mapboxInitData)}}
async function newMap(data){let map;map=new mapboxgl.Map({container:"map-container",style:data.style,center:[data.longPos,data.latPos],zoom:data.zoom,projection:data.projection,scrollZoom:data.scrollZoom,doubleClickZoom:data.doubleClickZoom});data.markerPos=await initializeMarkerCoordinates(data)
createMarker(data,map);return map}
async function initializeMarkerCoordinates(data){switch(data.markerPos){case false:console.log('false');return null;case 'adress':console.log('adress');return[data.longPos,data.latPos];default:console.log('market set');return await geocodeAdress(data);break}}
function getGeocodingUrl(address,accessToken){const encodedAddress=encodeURIComponent(address);return `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodedAddress}.json?access_token=${accessToken}`}
async function geocodeAdress(posData){var posCoord=[0,0];const response=await fetch(getGeocodingUrl(posData.markerPos,mapboxgl.accessToken))
const responseData=await response.json();let centerPos=await responseData.features[0].center;return centerPos}
function loadMapboxScript(src){return new Promise(function(resolve,reject){var script=document.createElement('script');script.src=src;script.onload=resolve;script.onerror=reject;document.head.appendChild(script)})}
function createMarker(data,map){if(data.markerPos!=null&&data.markerEl!=null){var el=data.markerEl.cloneNode(!0);new mapboxgl.Marker(el).setLngLat(data.markerPos).addTo(map)}}